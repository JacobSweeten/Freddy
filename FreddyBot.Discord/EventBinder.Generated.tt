<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using DSharpPlus;
using Microsoft.Extensions.DependencyInjection;

namespace <#= (string)System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint") #>;

public static partial class EventBinder
{
<#
foreach (string name in NameBases)
{
    string interfaceName = $"I{name}EventHandler";
    string argsName = $"{name}EventArgs";
#>

    public static void Bind<#= name #><THandler>(DiscordClient client, IServiceProvider provider) where THandler : <#= interfaceName #>
    {
        ArgumentNullException.ThrowIfNull(client);
        ArgumentNullException.ThrowIfNull(provider);
        if (typeof(THandler) == typeof(<#= interfaceName #>))
            throw new ArgumentException($"{nameof(THandler)} must not be the interface {nameof(<#= interfaceName #>)}", nameof(THandler));

        client.<#= name #> += async (sender, args) =>
        {
            await using AsyncServiceScope scope = provider.CreateAsyncScope();
            THandler handler = scope.ServiceProvider.GetRequiredService<THandler>();
            await handler.On<#= name #>(sender, args);
        };
    }
    public static void Bind<#= name #>(DiscordClient client, IServiceProvider provider, Type handlerType)
    {
        ArgumentNullException.ThrowIfNull(client);
        ArgumentNullException.ThrowIfNull(provider);
        ArgumentNullException.ThrowIfNull(handlerType);
        if (handlerType == typeof(<#= interfaceName #>))
            throw new ArgumentException($"{handlerType.Name} must not be the interface {nameof(<#= interfaceName #>)}", nameof(handlerType));
        if (!typeof(<#= interfaceName #>).IsAssignableFrom(handlerType) )
            throw new ArgumentException($"{nameof(handlerType)} must be assignable to the interface {nameof(<#= interfaceName #>)}", nameof(handlerType));

        client.<#= name #> += async (sender, args) =>
        {
            await using AsyncServiceScope scope = provider.CreateAsyncScope();
            <#= interfaceName #> handler = (<#= interfaceName #>)scope.ServiceProvider.GetRequiredService(handlerType);
            await handler.On<#= name #>(sender, args);
        };
    }
<#}#>
}
<#+

private static List<string> NameBases = new()
{
    "SocketOpened",
    "SocketClosed",
    "Ready",
    "Resumed",
    "Heartbeated",
    "Zombied",
    "ChannelCreated",
    "ChannelUpdated",
    "ChannelDeleted",
    "DmChannelDeleted",
    "ChannelPinsUpdated",
    "GuildCreated",
    "GuildAvailable",
    "GuildUpdated",
    "GuildDeleted",
    "GuildUnavailable",
    "GuildDownloadCompleted",
    "GuildEmojisUpdated",
    "GuildStickersUpdated",
    "GuildIntegrationsUpdated",
    "ScheduledGuildEventCreated",
    "ScheduledGuildEventUpdated",
    "ScheduledGuildEventDeleted",
    "ScheduledGuildEventCompleted",
    "ScheduledGuildEventUserAdded",
    "ScheduledGuildEventUserRemoved",
    "GuildBanAdded",
    "GuildBanRemoved",
    "GuildMemberAdded",
    "GuildMemberRemoved",
    "GuildMemberUpdated",
    "GuildMembersChunked",
    "GuildRoleCreated",
    "GuildRoleUpdated",
    "GuildRoleDeleted",
    "InviteCreated",
    "InviteDeleted",
    "MessageCreated",
    "MessageAcknowledged",
    "MessageUpdated",
    "MessageDeleted",
    "MessagesBulkDeleted",
    "MessageReactionAdded",
    "MessageReactionRemoved",
    "MessageReactionsCleared",
    "MessageReactionRemovedEmoji",
    "PresenceUpdated",
    "UserSettingsUpdated",
    "UserUpdated",
    "VoiceStateUpdated",
    "VoiceServerUpdated",
    "ThreadCreated",
    "ThreadUpdated",
    "ThreadDeleted",
    "ThreadListSynced",
    "ThreadMemberUpdated",
    "ThreadMembersUpdated",
    //"ApplicationCommandCreated",
    //"ApplicationCommandUpdated",
    //"ApplicationCommandDeleted",
    //"ApplicationCommandPermissionsUpdated",
    "IntegrationCreated",
    "IntegrationUpdated",
    "IntegrationDeleted",
    "StageInstanceCreated",
    "StageInstanceUpdated",
    "StageInstanceDeleted",
    "InteractionCreated",
    "ComponentInteractionCreated",
    "ModalSubmitted",
    "ContextMenuInteractionCreated",
    "TypingStarted",
    "UnknownEvent",
    "WebhooksUpdated",
    "ClientErrored"
};
#>